// Code generated by mockery v2.20.0. DO NOT EDIT.

package products

import (
	context "context"

	model "github.com/kytruong0712/getgo/api/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockController is an autogenerated mock type for the Controller type
type MockController struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *MockController) Create(_a0 context.Context, _a1 CreateInput) (model.Product, error) {
	ret := _m.Called(_a0, _a1)

	var r0 model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateInput) (model.Product, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CreateInput) model.Product); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, CreateInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockController interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockController creates a new instance of MockController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockController(t mockConstructorTestingTNewMockController) *MockController {
	mock := &MockController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
